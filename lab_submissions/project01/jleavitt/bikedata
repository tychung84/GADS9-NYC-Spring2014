{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "# from pylab import *\n",
      "\n",
      "import matplotlib.pyplot as plt\n",
      "import pandas as pd\n",
      "import numpy as np"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "    # Read in bikedata\n",
      "bikedata = pd.read_csv('2014-02 - Citi Bike trip data.csv', delimiter=',')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "bikedata.head(3) # get a sense of bikedata data"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>duration</th>\n",
        "      <th>start</th>\n",
        "      <th>stop</th>\n",
        "      <th>startid</th>\n",
        "      <th>startname</th>\n",
        "      <th>startlat</th>\n",
        "      <th>startlong</th>\n",
        "      <th>endid</th>\n",
        "      <th>endname</th>\n",
        "      <th>endlat</th>\n",
        "      <th>endlong</th>\n",
        "      <th>bikeid</th>\n",
        "      <th>usertype</th>\n",
        "      <th>birthyr</th>\n",
        "      <th>gender</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 382</td>\n",
        "      <td> 2/1/2014 0:00</td>\n",
        "      <td> 2/1/2014 0:06</td>\n",
        "      <td> 294</td>\n",
        "      <td>    Washington Square E</td>\n",
        "      <td> 40.730494</td>\n",
        "      <td>-73.995721</td>\n",
        "      <td> 265</td>\n",
        "      <td> Stanton St &amp; Chrystie St</td>\n",
        "      <td> 40.722293</td>\n",
        "      <td>-73.991475</td>\n",
        "      <td> 21101</td>\n",
        "      <td> Subscriber</td>\n",
        "      <td> 1991</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 372</td>\n",
        "      <td> 2/1/2014 0:00</td>\n",
        "      <td> 2/1/2014 0:06</td>\n",
        "      <td> 285</td>\n",
        "      <td>     Broadway &amp; E 14 St</td>\n",
        "      <td> 40.734546</td>\n",
        "      <td>-73.990741</td>\n",
        "      <td> 439</td>\n",
        "      <td>           E 4 St &amp; 2 Ave</td>\n",
        "      <td> 40.726281</td>\n",
        "      <td>-73.989780</td>\n",
        "      <td> 15456</td>\n",
        "      <td> Subscriber</td>\n",
        "      <td> 1979</td>\n",
        "      <td> 2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 591</td>\n",
        "      <td> 2/1/2014 0:00</td>\n",
        "      <td> 2/1/2014 0:10</td>\n",
        "      <td> 247</td>\n",
        "      <td> Perry St &amp; Bleecker St</td>\n",
        "      <td> 40.735354</td>\n",
        "      <td>-74.004831</td>\n",
        "      <td> 251</td>\n",
        "      <td>      Mott St &amp; Prince St</td>\n",
        "      <td> 40.723180</td>\n",
        "      <td>-73.994800</td>\n",
        "      <td> 16281</td>\n",
        "      <td> Subscriber</td>\n",
        "      <td> 1948</td>\n",
        "      <td> 2</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>3 rows \u00d7 15 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "   duration          start           stop  startid               startname  \\\n",
        "0       382  2/1/2014 0:00  2/1/2014 0:06      294     Washington Square E   \n",
        "1       372  2/1/2014 0:00  2/1/2014 0:06      285      Broadway & E 14 St   \n",
        "2       591  2/1/2014 0:00  2/1/2014 0:10      247  Perry St & Bleecker St   \n",
        "\n",
        "    startlat  startlong  endid                   endname     endlat  \\\n",
        "0  40.730494 -73.995721    265  Stanton St & Chrystie St  40.722293   \n",
        "1  40.734546 -73.990741    439            E 4 St & 2 Ave  40.726281   \n",
        "2  40.735354 -74.004831    251       Mott St & Prince St  40.723180   \n",
        "\n",
        "     endlong  bikeid    usertype birthyr  gender  \n",
        "0 -73.991475   21101  Subscriber    1991       1  \n",
        "1 -73.989780   15456  Subscriber    1979       2  \n",
        "2 -73.994800   16281  Subscriber    1948       2  \n",
        "\n",
        "[3 rows x 15 columns]"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "    #  Retrieve column names\n",
      "bikedata.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "Index([u'duration', u'start', u'stop', u'startid', u'startname', u'startlat', u'startlong', u'endid', u'endname', u'endlat', u'endlong', u'bikeid', u'usertype', u'birthyr', u'gender'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "bikedata.duration.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "count    224736.000000\n",
        "mean        874.519810\n",
        "std        5486.092219\n",
        "min          60.000000\n",
        "25%         360.000000\n",
        "50%         544.000000\n",
        "75%         845.000000\n",
        "max      766108.000000\n",
        "Name: duration, dtype: float64"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "    # Calculate distances traveled\n",
      "latdist = bikedata.endlat - bikedata.startlat\n",
      "longdist = bikedata.endlong - bikedata.startlong\n",
      "totaldist = ((latdist**2) + (longdist**2))**.5"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "    # store distance info in data frame\n",
      "from pandas import *\n",
      "distance = DataFrame({'latdist':latdist, 'longdist':longdist, 'totaldist':totaldist})"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "    # Check that distance df is what I think it is\n",
      "len(bikedata.startlat), len(distance)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "(224736, 224736)"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "distance.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>latdist</th>\n",
        "      <th>longdist</th>\n",
        "      <th>totaldist</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td> 224736.000000</td>\n",
        "      <td> 224736.000000</td>\n",
        "      <td> 224736.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>     -0.000145</td>\n",
        "      <td>     -0.000135</td>\n",
        "      <td>      0.015294</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>      0.014006</td>\n",
        "      <td>      0.012040</td>\n",
        "      <td>      0.010357</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>     -0.086687</td>\n",
        "      <td>     -0.059058</td>\n",
        "      <td>      0.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>     -0.007273</td>\n",
        "      <td>     -0.008108</td>\n",
        "      <td>      0.008321</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>      0.000000</td>\n",
        "      <td>      0.000000</td>\n",
        "      <td>      0.012686</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>      0.007044</td>\n",
        "      <td>      0.007874</td>\n",
        "      <td>      0.019439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>      0.084147</td>\n",
        "      <td>      0.060703</td>\n",
        "      <td>      0.087475</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>8 rows \u00d7 3 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "             latdist       longdist      totaldist\n",
        "count  224736.000000  224736.000000  224736.000000\n",
        "mean       -0.000145      -0.000135       0.015294\n",
        "std         0.014006       0.012040       0.010357\n",
        "min        -0.086687      -0.059058       0.000000\n",
        "25%        -0.007273      -0.008108       0.008321\n",
        "50%         0.000000       0.000000       0.012686\n",
        "75%         0.007044       0.007874       0.019439\n",
        "max         0.084147       0.060703       0.087475\n",
        "\n",
        "[8 rows x 3 columns]"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fig,ax1 = plt.subplots(1,1)\n",
      "ax1.hist(distance.totaldist, color='#eeeeee')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "(array([  6.19920000e+04,   9.34470000e+04,   4.08450000e+04,\n",
        "         1.60780000e+04,   6.92700000e+03,   3.21900000e+03,\n",
        "         1.52800000e+03,   5.56000000e+02,   1.24000000e+02,\n",
        "         2.00000000e+01]),\n",
        " array([ 0.        ,  0.00874749,  0.01749499,  0.02624248,  0.03498997,\n",
        "        0.04373747,  0.05248496,  0.06123245,  0.06997995,  0.07872744,\n",
        "        0.08747493]),\n",
        " <a list of 10 Patch objects>)"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nt95880298MIL2rZtW9wyORwOhcNhNTc3a8GCBWpubta1116rqqqqqDNFm2tQf3+/XnvtNT344INx\nzSRJ+/bt03PPPaf9+/ervb1dR48e1Z///Oe4ZsrJydHSpUtVUlKie+65RwUFBV/5gSkhCyQ9PV1t\nbW2Rr9va2uTxeM67TjAYlMfjuaCxlzJTLA5LL2aukydPqrS0VD/+8Y81bdq0hMg0KDk5Wffee692\n7twZ10zvv/++6uvrdeONN2rmzJl6++23VVFREddMkpSWliZJGjZsmO6//37t2LEjrpk8Ho88Ho9u\nv/12SdL06dPV3NwcdaZocw168803deutt2rYsGFxz7Rz507dcccdcrlccjqdeuCBB/T+++/HNZN0\n6mafnTt36p133tHQoUN18803n/8Jo75qcxGcPHnS3HTTTaa1tdX09fV95YWgDz74IHIh6ELGXupM\ng1pbW2N+ET2aXF988YUpLy83jz76aMJk+ve//20OHz5sjDGmt7fXjB8/3mzZsiWumU7X2NhofvjD\nH0adJ9pMx44dM59//rkxxpijR4+aO+64w7z11ltxzWSMMePHjzeffPKJMcaYJ554wixZsiTqTLHI\nZYwxM2bMiMmF6lhk2r17t8nNzTW9vb3miy++MBUVFeb555+PayZjjOns7DTGGHPgwAGTk5Njenp6\nzvt8CVkgxhizadMmk52dbbKysszTTz9tjDHmxRdfNC+++GJknZ/+9KcmKyvLjB492uzateu8Y+Od\n6aGHHjLf//73zbe+9S3j8XjMyy+/HPdc27ZtMw6Hw+Tn55sxY8aYMWPGmDfffDOumf75z3+agoIC\nk5+fb/Ly8syvf/3rmOSJJtPpGhsbY3YXVjSZ9u3bZ/Lz801+fr7Jzc1NmJ/zDz/80Nx2221m9OjR\n5v7774/ZXVjR5jp69KhxuVyR0k2ETM8884zx+Xxm1KhRpqKiwvT398c90/jx443P5zP5+fnm7bff\n/srnYiIhAMBKQl4DAQAkPgoEAGCFAgEAWKFAAABWKBAAgBUKBABghQIBAFihQAAAVv4fDmR+oO0V\nHusAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x18172c50>"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# calculating distances in meaningful units\n",
      "# converting latitude & longitude to miles\n",
      "distance['longmiles'] = distance.longdist/.019078"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "distance['latmiles'] = distance.latdist/.014457"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 40
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "distance['totmiles'] = ((distance.longmiles**2) + (distance.latmiles**2))**.5"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 41
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Because I keep forgetting what columns I'm working with\n",
      "for x in bikedata.columns.values:\n",
      "    print x,"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "duration start stop startid startname startlat startlong endid endname endlat endlong bikeid usertype birthyr gender\n"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for x in distance.columns.values:\n",
      "    print x,"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "latdist longdist totaldist longmiles latmiles totmiles\n"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Checking out duration vs. distance data\n",
      "for x in range (49, 55):\n",
      "    print (bikedata.duration.ix[x], round(distance.totmiles.ix[x], 2))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(258, 1.74)\n",
        "(584, 0.6)\n",
        "(242, 0.43)\n",
        "(983, 1.87)\n",
        "(317, 0.53)\n",
        "(114, 0.16)\n"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print bikedata['birthyr'].describe()\n",
      " # checking out birth years in bike data - some data is no good"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "count     224736\n",
        "unique        78\n",
        "top         1985\n",
        "freq        9305\n",
        "Name: birthyr, dtype: object\n"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      " # creating non-random easy-to-work with sub-sample of bikedata \n",
      "shortbikedata = bikedata[:5000]\n",
      "print len(shortbikedata)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5000\n"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      " # The maximum birthyear is a string representing nothing\n",
      "shortbikedata['birthyr'].max()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 47,
       "text": [
        "'\\\\N'"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print shortbikedata.birthyr.count(), len(shortbikedata), '\\n'*2, \\\n",
      "shortbikedata.birthyr[0:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5000 5000 \n",
        "\n",
        "0    1991\n",
        "1    1979\n",
        "2    1948\n",
        "Name: birthyr, dtype: object\n"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      " # Some old folks keep bikes out for more than 20 minutes\n",
      "    # But this can be interpreted in 1 of 2 ways w/o distance \n",
      "print shortbikedata[(shortbikedata.birthyr < 1960) & \\\n",
      "                    (shortbikedata.duration > 1200)]['duration'].mean(), \\\n",
      "    shortbikedata[(shortbikedata.birthyr < 1960) & \\\n",
      "    (shortbikedata.duration > 1200)]['duration'].count()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "nan 0\n"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "bikedata['minutes'] = bikedata['duration']/60\n",
      "bikedata.minutes.hist(grid=False, bins=20, range=(1,4000/65))\n",
      "plt.xlabel('Bike Trip Duration (Mins)', color=\"midnightblue\", fontdict={'fontsize':14})\n",
      "plt.ylabel('Number of Trips', color=\"midnightblue\", fontdict={'fontsize':14})\n",
      " # plt.text(25,50000, \"Few trips last even half an hour\", color='midnightblue')\n",
      "\n",
      "plt.figtext(0.197, 1.10,\"How long do people keep out\",fontdict={'fontsize':18}, color=\"midnightblue\")\n",
      "plt.figtext(0.18,1.015,\"Citi Bikes in the dead of winter?\",fontdict={'fontsize':18}, color=\"midnightblue\")\n",
      "plt.figtext(0.345,.93,\"(February 2014)\",fontdict={'fontsize':18}, color=\"midnightblue\")\n",
      "# plt.figtext(0.02,0.6,\"# of exposures\",fontdict={'fontsize':18},rotation=90)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 50,
       "text": [
        "<matplotlib.text.Text at 0x18425898>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAZgAAAFWCAYAAABU2YuRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XdYFMf/wPH3UURUREEBORREQMTesPfeO0SNJSb5RU2M\nwcQS0zQNkmhMLBi/RhO72Dto7AqKLRFbBDugooI0aQL7+4Nw8XKgB3ogyef1PPckzM3Ozu6t+9mZ\n2d1RKYqiIIQQQrxgRsVdASGEEP9OEmCEEEIYhAQYIYQQBiEBRgghhEFIgBFCCGEQEmCEEEIYhAQY\noZeQkCuo1ZNYt+5EcVfluf2btuV5BQScQK2exPHjV19oubNmBaFWTyIq6uELLVeULBJgikHuCe6n\nnw7km0etnsTIkYuLsFb6UalUxV2FF+bftC2iZFm8+NB/4gJHAkwxetYJTk6AQvw7LV58iPXrTxZ3\nNQxOAowQQgiDMCnuCoiCCQw8x8KF+7l48TYqlQoPD3vGj+9It251NHnee28N27b9zqVLX2NmlvMT\nnzp1g3795lKhgjnnz3+paR3t33+JESMW89NPI+nTp0GB65OSks4PP/zG9u1/cPduApaW5rRrV5PJ\nk3vi4FBRky8k5ApDhvgzZ84rZGcr/PTTAW7ejKVyZQtGj27N+PEddcpetiyYxYsPER39ELW6Im+8\n0RZz81JMmrSWjRvfpnnzGs+sX1DQOWbP3s3Vq/ewsiqLl5cnzZo555k3NjaZWbOC2LPnArGxSVSq\nZEHXrnWYPLk7FSuWfea63ntvNevXnyIs7HNmztzKvn2XSE9/TKNGjnzySV/q1nXQWWbr1t9ZuvQI\nly7dJitLoVatKowb14Feverr5F216jjLlh3lypV7lCplTMOGjvj4dMXTU3t71OpJDBnSlIEDG/Ht\nt4FcunQHCwsz+vZtyLRpPSlTxuyZ25KensmiRQfYtOk0t27FYWZmgqenM5Mn96BOHfUzl89LVlY2\n06dvYNWq43z0UR/GjesAwLVr95kzZzdHjoQTH5+Cra0lvXvX5/33u1OmTCmtMmJiEpgzZw97917k\nwYMkrKzK0bmzB1On9sTaupwm36xZQcyZs4cDB6awfHkI27f/QVJSGh4e9kyb1ovWrV31qrO+x3dA\nwIl8j8tBg+YTFfWQ0NBPgJzfByA6Ol7z/wChoZ9olflvIAGmGKWkZBAbm6x3/l9/PcpHH23C1dWG\nSZO6oSgK69adZMyYpXz77RCGD28BQJs2rqxff5KTJ69r/iEdPRqOkZGKhIRUzp2Lol69qn+lR2Bk\npKJlS5cC1//x4yyGDl3EqVM36N27PuPGdeDatfssXx7CoUOXCQycRJUqFbSWWbEihPv3kxg2rDnl\ny5uzceMpvvpqB1WqVGDAgEaafPPn78PXdyf16jkwfXpvUlIy8Pffr3USeZbAwDDeeONXHB2t8fHp\nirGxEQEBJ9i794JO3sTEVPr1m8uNGw8YOrQZdes6cO5cFMuXBxMcHMGuXT6ULfvsEzPA8OGLqFix\nLB980J179xL55ZcjDBo0n+3bJ1KzZhVNvm++2cXcuXvp2NGdKVN6YmSkIjAwjP/7v2V89dVARo9u\nrcn75ZfbWbjwAI0aVWP69F4kJaWzcuUxhgzx55dfXqdjx1padTh/PoqdO8/y6qst8PJqSnBwBEuW\nHOHPP+8QEDDuqd2vjx9nMXz4Ik6fvsHgwU14/fW2JCSksnr1cfr1m8vmze9ojh99paZmMH78Cg4c\nuMTcucMZOLAxAGFhkQwZ4k+FCmUYObIVdnaWXLgQzdKlRzh58jqbNr2DiYkxAFFRD+nb90cyM7MY\nOrQ5jo7WXL+ec7yFhFwhMHASFhaltdb77rurMDExZsKETn/tsxCGD1/EypX/R5s2bk+tc2GO7/w8\nubvnzRvOZ59twdq6LO++20WTbmX17IuYEkcRRS44OEKxt/d55mfkyMWaZR4+fKTUqDFFadXqKyU5\nOU2TnpSUqrRo8aXi6jpVSUhIURRFUW7ffqjY2/sofn47NfkGD56vjB79s+LmNk1ZsGCfJr1r11lK\np07f6l3ndetOaNJWrgxR7O19lC+/3KaVd+/eC4q9vY8yYcJKneUbNfpMSUpK1aSnpKQrdep8rPTu\n/YMmLS4uWalefbLSqdO3Snr6Y036vXuJSs2a0xS12kc5duzKU+ubmZmlNG48Q6lT52MlLi5Zk56Y\nmKo0bTpTZ1t8fXco9vY+yrJlR7XK+eWXI4q9vY/yzTe7nrWLlIkTVyn29j7KG28s1Uo/e/aWolb7\nKMOG/aSV9s/fKNdrry1R3NymaX7niIgYxd7eR+nff67y+HGmJt/du/GKu/uHiqfn50pWVpYmPff4\nCQo6p1XuJ59sUuztfZQtW85o0tauDVXs7bX356JFBxR7ex/l4ME/tZZPSkpVmjSZqQwaNP+Z++K7\n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\npaQWZOPsAAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0xa729978>"
       ]
      }
     ],
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Replacing bad birth years in bikedata with 1900\n",
      "\n",
      "for x in range(len(bikedata)):\n",
      "    if bikedata.birthyr[x] in ('\\\\N',0):\n",
      "        bikedata.birthyr[x] = 1900\n",
      "    bikedata.birthyr[x] = int(bikedata.birthyr[x]) "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 117
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "femalebikedata.birthyr.max(), femalebikedata.birthyr.min()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 139,
       "text": [
        "(1997, 1926)"
       ]
      }
     ],
     "prompt_number": 139
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "malebikedata = bikedata.loc[bikedata['gender']==1]\n",
      "femalebikedata = bikedata.loc[bikedata['gender']==2]\n",
      "\n",
      "for x in range(len(bikedata)):\n",
      "    if bikedata.birthyr[x] in ('\\\\N',0):\n",
      "        bikedata.birthyr[x] = 1900\n",
      "    bikedata.birthyr[x] = int(bikedata.birthyr[x]) "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 118
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Replacing bad birth years in shortbikedata with 1900\n",
      "\n",
      "for x in range(len(shortbikedata)):\n",
      "    if shortbikedata.birthyr[x] in ('\\\\N',0):\n",
      "        shortbikedata.birthyr[x] = 1900\n",
      "    shortbikedata.birthyr[x] = int(shortbikedata.birthyr[x]) \n",
      "    \n",
      "# Splitting shortbike data into new vars for males & females\n",
      "# Neuter bicyclists are excluded\n",
      "\n",
      "maleshortbikedata = shortbikedata.loc[shortbikedata['gender']==1]\n",
      "femaleshortbikedata = shortbikedata.loc[shortbikedata['gender']==2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Creating fembirthlist & femdurlist\n",
      "# in case fem birthyr's & durations still won't plot\n",
      "\n",
      "\n",
      "fembirthlist=[]\n",
      "for x in (femaleshortbikedata.birthyr):\n",
      "    fembirthlist.append(x)   \n",
      "\n",
      "femlongbirthlist=[]\n",
      "for x in (femalebikedata.birthyr):\n",
      "    femlongbirthlist.append(x)\n",
      "\n",
      "femlongage=[]\n",
      "for x in (femalebikedata.birthyr):\n",
      "    femlongage.append(2013-x)\n",
      "    \n",
      "femdurlist=[]\n",
      "for x in (femaleshortbikedata.duration):\n",
      "    femdurlist.append(x) \n",
      "\n",
      "femlongdurlist=[]\n",
      "for x in (femalebikedata.duration):\n",
      "    femlongdurlist.append(x)   \n",
      "\n",
      "print len(fembirthlist), len(femdurlist), len(femalebikedata), len(femlongbirthlist), len(femlongdurlist)\n",
      "print fembirthlist[0:5], femlongbirthlist[0:5]\n",
      "print femdurlist[0:5], femlongdurlist[0:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1188 1188 41479 41479 41479\n",
        "[1979, 1948, 1983, 1989, 1980] [1979, 1948, 1983, 1989, 1980]\n",
        "[372, 591, 439, 292, 259] [372, 591, 439, 292, 259]\n"
       ]
      }
     ],
     "prompt_number": 152
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "femalebikedata.birthyr.count(), len(femlongage)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 153,
       "text": [
        "(41479, 41479)"
       ]
      }
     ],
     "prompt_number": 153
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "femagedebug = femlongage\n",
      "femagedebug.sort()\n",
      "femagedebug[0:5], femagedebug[-5:]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 146,
       "text": [
        "([16, 16, 16, 16, 16], [1997, 1997, 1997, 1997, 1997])"
       ]
      }
     ],
     "prompt_number": 146
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print fembirthlist[0:5], '\\n', femaleshortbikedata.birthyr[0:5] "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[1979, 1948, 1983, 1989, 1980] \n",
        "1     1979\n",
        "2     1948\n",
        "9     1983\n",
        "18    1989\n",
        "19    1980\n",
        "Name: birthyr, dtype: object\n"
       ]
      }
     ],
     "prompt_number": 59
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      " # Checking for ints in birthyr data\n",
      " # Seems strings have all been successfully removed.\n",
      "\n",
      "count=0             \n",
      "for x in range(0,5000): \n",
      "    if (isinstance(shortbikedata.birthyr[x], int)==False):\n",
      "        count = count + 1\n",
      "        \n",
      "print count, type(shortbikedata.birthyr[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0 <type 'int'>\n"
       ]
      }
     ],
     "prompt_number": 60
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "distance.totmiles.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 61,
       "text": [
        "count    224736.000000\n",
        "mean          0.939850\n",
        "std           0.673621\n",
        "min           0.000000\n",
        "25%           0.496625\n",
        "50%           0.755699\n",
        "75%           1.181352\n",
        "max           6.027552\n",
        "Name: totmiles, dtype: float64"
       ]
      }
     ],
     "prompt_number": 61
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# 4374 out of 224736 bikes were returned to the same station (I think)\n",
      "print len(distance[(distance.totmiles==0)])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4374\n"
       ]
      }
     ],
     "prompt_number": 62
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# I can't understand why birthyr full of ints can't describe better\n",
      "# maybe needs to be a float for describe calculations???\n",
      "print len(shortbikedata[shortbikedata.birthyr > 1960])\n",
      "print shortbikedata.duration.mean()\n",
      "shortbikedata.birthyr.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4150\n",
        "830.8146\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 63,
       "text": [
        "count     5000\n",
        "unique      64\n",
        "top       1984\n",
        "freq       266\n",
        "Name: birthyr, dtype: int64"
       ]
      }
     ],
     "prompt_number": 63
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# shortbikedata.birthyr.convert_objects(convert_numeric='force')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 64
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print shortbikedata.duration.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "830.8146\n"
       ]
      }
     ],
     "prompt_number": 65
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortbikedata.birthyr.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 66,
       "text": [
        "count     5000\n",
        "unique      64\n",
        "top       1984\n",
        "freq       266\n",
        "Name: birthyr, dtype: int64"
       ]
      }
     ],
     "prompt_number": 66
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortbikedata.duration.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 67,
       "text": [
        "count      5000.000000\n",
        "mean        830.814600\n",
        "std        4617.641036\n",
        "min          62.000000\n",
        "25%         338.000000\n",
        "50%         532.000000\n",
        "75%         862.250000\n",
        "max      278555.000000\n",
        "Name: duration, dtype: float64"
       ]
      }
     ],
     "prompt_number": 67
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortbikedata.duration.dropna().plot(grid=True, kind='kde', xlim=(0,4000))\n",
      "  # dropna() is unnecessary"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 68,
       "text": [
        "<matplotlib.axes.AxesSubplot at 0xf6bfa20>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0xfba8cc0>"
       ]
      }
     ],
     "prompt_number": 68
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "distance.totmiles.hist(grid=False, bins=30, range=(0,7), color='forestgreen')\n",
      "\n",
      "plt.xlabel('Bike Trip Distance (Miles)', color=\"darkgreen\", fontdict={'fontsize':16})\n",
      "plt.ylabel('Number of Trips', color=\"darkgreen\", fontdict={'fontsize':16})\n",
      " # plt.text(25,50000, \"Few trips last even half an hour\", color='midnightblue')\n",
      "\n",
      "plt.figtext(0.25,.95,\"How far do they go?\",fontdict={'fontsize':23}, color=\"darkgreen\")\n",
      "plt.figtext(0.655,.17,\"(Ans: Not very far!)\",fontdict={'fontsize':10}, color=\"darkgreen\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 69,
       "text": [
        "<matplotlib.text.Text at 0x17df8940>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nmfI/BPSFm8qozKoAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x17cf3470>"
       ]
      }
     ],
     "prompt_number": 69
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "distance.totmiles.plot(kind='kde', xlim=(0,6.5), style='r--')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 70,
       "text": [
        "<matplotlib.axes.AxesSubplot at 0xfe6aeb8>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEACAYAAAC08h1NAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XlcVXX+x/EXCuWaaG4JOKgQiyjYuJVjg0uDP0t/OVqD\n0yKmRvZrzFar2bTFtMU25vfIlsmfLei06qRhalJGGgmCzeAUlRagoiikiQpczu+Pk7hwEbicc7/3\nfs/n+Xjcx8yBw7mf9+B87uVzz/meAMMwDIQQQjhGK9UFCCGE8C5p/EII4TDS+IUQwmGk8QshhMNI\n4xdCCIeRxi+EEA5ja+O/6aab6NGjBwMGDGhwnzlz5hAZGUl8fDzbt2+3sxwhhBDY3PinT59ORkZG\ng99fu3Yt33zzDYWFhbzwwgvMnj3bznKEEEJgc+MfOXIknTt3bvD7q1evZtq0aQAMGzaMiooKSktL\n7SxJCCEcT+mMv6SkhLCwsLrt0NBQiouLFVYkhBD6U/7h7tkrRgQEBCiqRAghnCFQ5ZOHhIRQVFRU\nt11cXExISIjb/fbs2ePN0oQQwu/Fx8eTl5dX7+tK3/FPnDiR5cuXA7B161aCg4Pp0aNHvf327NmD\nYRhaPP76178qr0Hy6J9Ftzw6ZfFmnvz8fLe919Z3/FOnTuXjjz+mrKyMsLAwFixYQHV1NQCpqamM\nHz+etWvXEhERQfv27XnllVfsLMcn7N69W3UJltIpj05ZQK88OmUB9Xlsbfzp6emN7pOWlmZnCUII\nIc6i/MNdp0lJSVFdgqV0yqNTFtArj05ZQH2eAMMwfP5GLAEBAXilzMpKmDsXtm2DyZPhrrugTRv7\nn1cIIWzQUO+Ud/ynmzULDh+GZ5+FnBz41a+gttbSp8jMzLT0eKrplEenLKBXHp2ygPo8Sk/n9Cn7\n9kFhIWRmQrt2ZtPftQtayWujEEIvMuoRQghNyahHCCEEII3f61TP9qymUx6dsoBeeXTKAurzSONv\njvvvh1WrVFchhBAtIjP+5nj2WfjyS3jxRdWVCCFEo2TG35CtW2HlyqbtO3YsrF8PvvAiJIQQHpLG\nv3IlfPtt0/aNiTEv8iop8fjpVM/2rKZTHp2ygF55dMoC6vNI49+4EcaMadq+AQEwZAh88YW9NQkh\nhI2cPeMvLYXoaDhwAAKbeC3b/PngcsFDD1lfjxBCWKih3unsK3c3bYLLL2960we49144/3z7ahJC\nCJs5e9Tz6adm42+Odu2gdWuPn1L1bM9qOuXRKQvolUenLKA+j7Pf8c+aBRdeqLoKIYTwKmfP+IUQ\nQmNyHr8QQghAGr9nDAOOHvXoR1XP9qymUx6dsoBeeXTKAurzSOP3xIoVMH266iqEEMIjMuP3RG4u\nTJtmrtsjhBA+Smb8pzt0CAYP9vznL74YvvnG8tsyCiGENziz8efnQ9u2nv98hw7QuTMUFzf7R1XP\n9qymUx6dsoBeeXTKAurzOLPx5+VBfHzLjhERYb7rF0IIP+PMGf+0aTByJMyc6fkx/vAH8xjXXmtd\nXUIIYaGGeqczG39CArz0Usvm/EII4ePkw92Tamvh66/NtfUVUD3bs5pOeXTKAnrl0SkLqM/jvMbf\nqhXs3Qvt26uuRAghlHDmqEcIIRxARj1CCCEAafwts2ePeTFYM6ie7VlNpzw6ZQG98uiUBdTnkcbf\nEn/5C7z5puoqhBCiWZw346+qgvPOs+ZYixeb9+t94glrjieEEBaSGT+Yp3J26QKVldYcT67eFUL4\nIWc1/pISuOAC8765VoiMhMLCZv2I6tme1XTKo1MW0CuPTllAfR5nNf6iIujd27rjRUTAd9/JKp1C\nCL9ia+PPyMggOjqayMhIFi9eXO/7ZWVljBs3joSEBOLi4li2bJmd5Zjv+ENCrDteu3YwahRUVDT5\nRxITE617fh+gUx6dsoBeeXTKAurz2PbhrsvlIioqig0bNhASEsKQIUNIT08n5rSlEubPn8+JEyd4\n9NFHKSsrIyoqitLSUgIDA88s0qoPd59+GnbtgmeeafmxhBDCx3n9w93s7GwiIiIIDw8nKCiI5ORk\nVq1adcY+F110EYcPHwbg8OHDXHjhhfWavqXKyyEszL7jN4Hq2Z7VdMqjUxbQK49OWUB9Htu6bElJ\nCWGnNdnQ0FA+//zzM/aZNWsWo0ePplevXhw5coR//OMfdpVjWrDAvFG6EEI4mG2NPyAgoNF9Fi5c\nSEJCApmZmXz77bdcccUV5Ofn07Fjx3r7pqSkEB4eDkBwcDAJCQl1c7KTr55N2g4IaN7+Fm8nJiYq\nfX7JI9v+un2Sr9Tji3kyMzPrPis92S/dsW3Gv3XrVubPn09GRgYAjz76KK1atWLevHl1+4wfP54/\n/vGPjBgxAoAxY8awePFiBp+1Tr4s0iaEEM3n9Rn/4MGDKSwsZPfu3VRVVbFy5UomTpx4xj7R0dFs\n2LABgNLSUr766iv69u1rV0n2ycgAl6tJu579au/vdMqjUxbQK49OWUB9Htsaf2BgIGlpaSQlJREb\nG8vvfvc7YmJiWLp0KUuXLgXggQceYNu2bcTHxzN27Fgee+wxunTpYldJ9rn1VrmCVwjhN5yzVs/x\n4+Y6PRdcYE1Rp5s0CaZOlfvvCiF8iqzVs2EDJCfbc+yBA2HHDnuOLYQQFnNO49+7Fy66yJ5jx8dD\nfn6TdlU927OaTnl0ygJ65dEpC6jP45zGv38/9Ohhz7HlHb8Qwo84Z8Z/++3Qpw/MnWtNUaerrYWb\nb4bnnwc7rzwWQohmkBn/gQPQrZs9x27VCl56SZq+EMIvOKfxg30z/mZQPduzmk55dMoCeuXRKQuo\nz+Oct6hvvKG6AiGE8AnOmfELIYTDyIxfCCEEII3fWu++C198cc5dVM/2rKZTHp2ygF55dMoC6vNI\n47dSfj68957qKoQQ4pycMeP/6SeorITu3a0ryp21a2HJEnN5CCGEUMzZM/516yA11f7nGTLEHPXU\n1tr/XEII4SFnNP4DB+x/tw/mBWJdu8JXXzW4i+rZntV0yqNTFtArj05ZQH0eZzT+/fvtu2r3bEOH\nwln3FhZCCF/ijBn/H/4AkZEwZ451RTUkOxs6doSYGPufSwghzqGh3umMK3fLymD4cO8819Ch3nke\nIYTwkDNGPR06QK9eqqsA1M/2rKZTHp2ygF55dMoC6vM44x3/iy+qrkAIIXyGM2b8QgjhQM4+j18I\nIUQdafx2+P57uOYat99SPduzmk55dMoCeuXRKQuozyON3w49e8KaNeYyEUII4WP0n/EfOwb79pn3\n2/WmIUPg6adhxAjvPq8QQvzMuTP+/HyYOtX7zztkCGzb5v3nFUKIRujf+A8dgi5dvP+8gwe7bfyq\nZ3tW0ymPTllArzw6ZQH1efRv/AcPqmn8J1fqFEIIH6P/jP+ZZ+Dbb+HZZ60tqjEul/nZQkiId59X\nCCF+5twZv6pRT+vW0vSFED5J/8bfvr33z+g5B9WzPavplEenLKBXHp2ygPo8+q/Vc++9qisQQgif\nov+MXwghHMq5M37Vamqgulp1FUIIUUcav90mToQPP6zbVD3bs5pOeXTKAnrl0SkLqM8jjd9uCQly\nPr8QwqfYOuPPyMhg7ty5uFwuZs6cybx58+rtk5mZyR133EF1dTVdu3Z1+0ro8Yy/tha+/BLi4z2o\n3iLvvQcvvABr16qrQQjhSA31Ttsav8vlIioqig0bNhASEsKQIUNIT08n5rSbkFdUVDBixAjWrVtH\naGgoZWVldO3atcnFN+rQIejXD8rLWxKlZfbsgYED4cABCAhQV4cQwnG8/uFudnY2ERERhIeHExQU\nRHJyMqtWrTpjnzfeeIPJkycTGhoK4Lbpt4iqi7dO16sXtGkDu3YB6md7VtMpj05ZQK88OmUB9Xls\na/wlJSWEhYXVbYeGhlJSUnLGPoWFhRw6dIhRo0YxePBgXn31VWuLOHQILrzQ2mN6YuxY2L1bdRVC\nCAHYeAFXQBPGGtXV1eTm5rJx40YqKyu59NJLGT58OJGRkdYU4Qvv+AGWLav7r4mJicrKsINOeXTK\nAnrl0SkLqM9jW+MPCQmhqKiobruoqKhupHNSWFgYXbt2pW3btrRt25bLL7+c/Px8t40/JSWF8PBw\nAIKDg0lISKj7H+/kn031tn9embPB78u2bMu2bGu0nZmZybKf32ie7JduGTaprq42+vbta+zatcs4\nceKEER8fbxQUFJyxz86dO40xY8YYNTU1xtGjR424uDjj3//+d71jeVzmW28ZxiOPePazNtm0aZPq\nEiylUx6dshiGXnl0ymIY3svTUO+07R1/YGAgaWlpJCUl4XK5mDFjBjExMSxduhSA1NRUoqOjGTdu\nHAMHDqRVq1bMmjWL2NhY64qYPNm6YwkhhCZkrR4hhNCUrNWj2o8/QlaW6iqEEKLxxv/b3/6WNWvW\nUFtb64169LV/PyQnk7lpk+pKLHXygyUd6JQF9MqjUxZQn6fRxj979mxef/11IiIiuO+++/jqq6+8\nUZd+IiLMVTpLS1VXIoRwuCbP+CsqKlixYgUPP/wwvXv3ZtasWVx//fUEBQXZXaPnM/6cHIiLg/PP\nt74oT1x7LVx1Fdx4o+pKhBAO0KIZ/8GDB1m2bBkvvfQSl1xyCXPmzCEnJ4crrrjC8kItlZQEhw+r\nruKUkSNh82bVVQghHK7Rxj9p0iR+9atfUVlZyT//+U9Wr15NcnIyaWlpHDlyxBs1eqa2FioqoHNn\n1ZWccvnlZGZkqK7CUqpnlVbSKQvolUenLKA+T6Pn8c+aNYvx48ef8bUTJ05w/vnnk5OTY1thLXb4\nMHToAIE+dFvhuDgYPty8K5cv1SWEcJRGZ/yDBg1i+/btZ3ztkksuITc319bCTufRjP/bb83F0X5e\nFVMIIZymod7Z4NvOvXv3smfPHo4dO0Zubi6GYRAQEMDhw4eprKy0tVhLHDzoGytzCiGEj2lwxr9u\n3TruvvtuSkpKuOuuu7j77ru56667WLJkCQsXLvRmjZ5p1Qouu0x1FfWonu1ZTac8OmUBvfLolAXU\n52nwHX9KSgopKSm8/fbbTPbHNW8GDzYfQgghztDgjP/VV1/lhhtu4Mknnzxjbf2TI58777zTe0XK\nWj1CCNFszZ7xn5zjHzlyxG3jFy2Qmwvr14Obm88LIYTdZHVOL8vMzCQxJARGjYKiIr+/AXtmZmbd\nDSH8nU5ZQK88OmUB7+Xx+Mrde++9l8OHD1NdXc2YMWPo2rWr9ffGdZqICLPhFxaqrkQI4UCNvuOP\nj48nPz+fd999l/fff58lS5YwcuRIduzY4a0aPXvHn5sL/fpBp072FNVSKSnmxVy33KK6EiGEpjx+\nx19TUwPA+++/z5QpU+jUqZN/zPhTU+E//1FdRcNGj4aPPlJdhRDCgRpt/BMmTCA6OpqcnBzGjBnD\n/v37adOmjTdqa5lDh3zyAq6683dHj4ZNm8w1hfyY6vORraRTFtArj05ZQH2eRhv/okWLyMrKIicn\nh/POO4/27duzatUqb9TWMr5+5W5oKGzc6Pcf7goh/E+TzurJysri+++/p7q62vyhgABu9OKa8s2e\n8dfUQJs2UFVlXsErhBAO1Ozz+E+6/vrr+e6770hISKB169Z1X/dm42+28nIIDpamL4QQbjTa+HNy\ncigoKPCPD3RPqq6GceNUV+GWnI/su3TKAnrl0SkLqM/T6FviuLg49u7d641arNOrF7z2muoqhBDC\nJzU6409MTCQvL4+hQ4dy/s/3rg0ICGD16tVeKfDk8+ly5a5bR49C+/aqqxBCaMbjGf/8+fPrHcCv\nxj6+bt06ePxx2LBBdSVCCIdodNSTmJhIeHg41dXVJCYmMnToUAYNGuSN2rRU7/zd4cPh88/h+HEl\n9bSU6vORraRTFtArj05ZQH2eRhv/Cy+8wDXXXENqaioAxcXFTJo0yfbCHKNTJ+jfH7ZsUV2JEMIh\nmrRWT3Z2NsOHD6+79+6AAQP48ssvvVIgeDDjz8+Hbt3MD3n9wQMPQOvW8NBDqisRQmjE47V6zj//\n/LoPdcFcu8fnZ/yPPAKbN6uuoulk3R4hhBc12vh//etf88gjj1BZWcn69eu55pprmDBhgjdq85wP\nL9fgdrZ32WXmmj0ul9fraSnVs0or6ZQF9MqjUxZQn6dJa/V069aNAQMGsHTpUsaPH8/DDz/sjdo8\nd+gQdOmiuoqma9fOnPGfdmW0EELYpUlr9ezfvx+A7t27216QO82e8ffubY56fvEL+4oSQggf1+wZ\nv2EYzJ8/n65duxIVFUVUVBRdu3ZlwYIFvn8x1cGD/vWOXwghvKjBxv/UU0+RlZXFF198QXl5OeXl\n5WRnZ5OVlcVTTz3lzRqbp6YGrrgCOnRQXYlbqmd7VtMpj05ZQK88OmUB9XkabPzLly/njTfeoE+f\nPnVf69u3L6+//jrLly/3SnEeCQyE996Tde6FEKIBDc744+Li+Ne//uX2h871PTtov1bPST/8AF9+\nCVdeqboSIYQGmj3jDwoKavBg5/re6TIyMoiOjiYyMpLFixc3uN8XX3xBYGAg77zzTpOOq62yMrjn\nHtVVCCE012Dj37FjBx07dnT7aMpVuy6Xi9tuu42MjAwKCgpIT09n586dbvebN28e48aNc8S7+nPO\n9uLjYd8+2LPHa/W0lOpZpZV0ygJ65dEpC6jP02Djd7lcHDlyxO2jpqam0QNnZ2cTERFBeHg4QUFB\nJCcnu71X73PPPceUKVPo1q1by5LooHVrGDMGPvhAdSVCCI3Zdm/CkpISwsLC6rZDQ0MpKSmpt8+q\nVauYPXs2YNFyz9u3w3fftfw4Nmn0rjuTJ8Pbb3ulFivodFcknbKAXnl0ygLq89jW+JvSxOfOncui\nRYvqPoCwZNSTlgYbN7b8OKpceSVkZZn3DRZCCBs0eiMWT4WEhFBUVFS3XVRURGho6Bn75OTkkJyc\nDEBZWRkffPABQUFBTJw4sd7xUlJSCA8PByA4OJiEhIS6V82T87LExEQ4cIDM0lI47Z6WZ3xf8fbp\nsz23+3fsSOY990BWFolXXaW83hbn8aPtszOprkfynNrOy8tj7ty5PlOPr+bJzMxk2bJlAHX90i3D\nJtXV1Ubfvn2NXbt2GSdOnDDi4+ONgoKCBvdPSUkx3n77bbffa1aZw4cbxqefNrdcr9m0aZPqEiyl\nUx6dshiGXnl0ymIY3svTUO+07R1/YGAgaWlpJCUl4XK5mDFjBjExMSxduhSg7sYuljtwwFyL30ed\nfJXWhU55dMoCeuXRKQuoz9OkRdpUa9YFXJ06we7d0LmzrTUJIYSv8/hGLH6lthb+678gOFh1JQ06\nff6qA53y6JQF9MqjUxZQn0evxt+qFaxYoc86PbW15uhKCCEspN+oRyfvvGOeniq3ZRRCeMAZox7d\nTJgAX39t3jxeCCEsIo3fy5o12wsKgltvhWeesa2ellI9q7SSTllArzw6ZQH1eaTx+7qbb4Z334Wf\nb38phBAtpdeMf9s2aN8eYmLsL8qbbr4ZQkPhL39RXYkQwo84Y8b/0kuwaZPqKqx3550QHa26CiGE\nJvRq/D5+1S54ONuLjoZrr7W8FiuonlVaSacsoFcenbKA+jzS+IUQwmH0mvHHxMBbb0H//vYXJYQQ\nPs4ZM/4DB6B7d9VVCCGET9On8RsG/Pd/Q5cuqis5pxbP9o4fh4oKS2qxgupZpZV0ygJ65dEpC6jP\nY9uyzF4XEAAvv6y6Cvs9/DAcOwZPPqm6EiGEn9Jrxu8E338Pl1xiLj3dsaPqaoQQPswZM34n+MUv\nYPRo+Pn2akII0VzS+L3Mktne3Lnm+j21tS0/VgupnlVaSacsoFcenbKA+jzS+P3RZZeZN5tZs0Z1\nJUIIP6TPjP+zz8x1euLjvVOUahs2QLt25ouAEEK40VDv1OesnuXLYeBA5zT+sWNVVyCE8FP6jHpK\nS6FHD9VVNEr1bM9qOuXRKQvolUenLKA+j16Nv2dP1VUIIYTP02fG37cvfPghRER4pyghhPBx+p/H\n7yejHlscOgRVVaqrEEL4CT0af00NzJwJHTqorqRRtsz2brgB3nzT+uM2gepZpZV0ygJ65dEpC6jP\no0fjDww0L2gKCFBdiRq33AJPP20uVCeEEI3QZ8bvZLW1cPHF8H//ByNGqK5GCOEj9J/xO1mrVnD7\n7ea7fiGEaIQ0fi+zbbaXkgIffWSu3ulFqmeVVtIpC+iVR6csoD6PNH5ddOwIzz0HLpfqSoQQPk6P\nGf+aNdCnD8TGeq8oIYTwcXrP+F98Ef7zH9VVCCGEX9Cj8e/b5zfLNaie7VlNpzw6ZQG98uiUBdTn\n0aPxO/mqXSGEaCb/n/EbhrkO//79fnHlrtd8/z307u3ci9qEEBrP+I8cMc9jl6Z/imHAVVdBRobq\nSoQQPsj2xp+RkUF0dDSRkZEsXry43vdff/114uPjGThwICNGjGDHjh3NewLDgD/+0aJq7eeV2V5A\nACxYAPffb/t9eVXPKq2kUxbQK49OWUB9Hlsbv8vl4rbbbiMjI4OCggLS09PZuXPnGfv07duXTz75\nhB07dvDnP/+Zm2++uXlP0qmT2eDEmSZNgjZtID1ddSVCCB9j64x/y5YtLFiwgIyfRw6LFi0C4L77\n7nO7f3l5OQMGDKC4uPjMImWtHs9s3gzXXQc7d5qfgwghHEXJjL+kpISwsLC67dDQUEpKShrc/+WX\nX2b8+PF2luQsI0eai7Y9/rjqSoQQPsTWm60HNOOMkk2bNvH3v/+drKwst99PSUkhPDwcgODgYBIS\nEkhMTAROzcv8Yfv02Z5Xnn/JEjI//RQyM/XIY+P22ZlU1yN5Tm3n5eUxd+5cn6nHV/NkZmaybNky\ngLp+6ZZhoy1bthhJSUl12wsXLjQWLVpUb7/8/HyjX79+RmFhodvj2FymV23atEl1CZbSKY9OWQxD\nrzw6ZTEM7+VpqHfaOuOvqakhKiqKjRs30qtXL4YOHUp6ejoxMTF1+/zwww+MHj2a1157jeHDh7s9\nzjln/P/7v3D11dCrlx0RhBDCbzXUO20d9QQGBpKWlkZSUhIul4sZM2YQExPD0qVLAUhNTeXBBx+k\nvLyc2bNnAxAUFER2dnbTn+Sxx2DcODvKF0IILfn3lbu1teYpi4cPm//pBzJPm7XrQKc8OmUBvfLo\nlAW8l0fPK3f374fgYL9p+sq5XHDNNVBUpLoSIYRC/v2Of9s2uPlmyM31flH+auFC2LDBfLTy79d9\nIcS56fmOv6QEQkNVV+Ff5s2DqipYskR1JUIIRfy78UdGmu/4/cjp51gr0bo1vPoqPPEEfPBBiw+n\nPI+FdMoCeuXRKQuoz+PfjT821lyFUjRPnz7wzjswbRp8+63qaoQQXubfM37RMjt2QFyczPqF0FRD\nvVMavxBCaErPD3f9kOrZntV0yqNTFtArj05ZQH0e/2n8n36qugJnKCoyL4gTQmjLf0Y9o0fDxo2n\nvlhQAOvWwR13qCtMR4sXw7Jl8N57EBWluhohRAv4/6gnL+/MK06zsswPJ4W15s2DO+801/Jfs0Z1\nNUIIG/hP47/6anjrrVPbO3bAgAHq6vGQ6tlek8yaBatWQWqqeaXvOf4o9Is8TaRTFtArj05ZQH0e\n/2n8M2bAhRee2vbTxu83Lr0UPv8cVq+Gf/5TdTVCCAv5z4z/9DKPH4du3aC42LzZurBPTY15nr+c\n6y+E31GyHr9ttmyB/v2l6XtDoH/+ExFCNMw/38b98pfw5JOqq/CI6tmeZZ5/Hu68k8x33lFdiWW0\n+d38TKc8OmUB9Xn8s/FfcAGMGKG6CmebONEcA02bZp4J9OOPqisSQjSRf874he8oKoL582HtWvMM\noGnT5PMAIXyE/5/HL3xTWBi8/LJ59k9uLgQEqK5ICNEIafxepnq2Z7W6PEOGwHPP+XXj1/Z3owGd\nsoD6PNL4hRDCYWTGL+xVVgbjxsHMmeaN3k+/CE8IYSuZ8Qs1LrzQXPht0ybo2xeuvBJeew1++kl1\nZUI4ljR+L1M927Nao3kCAmDMGFi5EkpK4LrrYMUKeOABr9TXHI773fgRnbKA+jxyWabwng4d4Pe/\nNx+1taqrEcKxZMYvfMsPP0Dv3qqrEEILMuMXvq+8HIYNMz8HePNNOHZMdUVCaEkav5epnu1ZzdI8\nnTvDd9/BlCmwdCl07w5jx8Irr1j3HOcgvxvfpVMWUJ9HZvzCt7RtC9Onm4/ycvNeyw2N+SoroU0b\nWSJCiGaSGb/wX088AQ89BIMHm1cO//KX5qNPH7++glgIqzTUO6XxC/924ABkZ0NOjvnIzYU//cm8\nbaQQDicf7voI1bM9qynP062b+WHwX/5i3ie4qMi8Z7A7//gHrFtnjpDcUJ7FYjrl0SkLqM8jM36h\nn4Zm/j/8AGvWmH8ZhIRAYiKMGgUTJpifLQjhEDLqEc7jcsGOHeYyEpmZ8Prr0LFj/f3+9CfzBSI2\nFmJizL8u5LMD4Udkxi9Ecz3xBHz1FezcCQUFZtPv3998wWjdWnV1QjRKyYw/IyOD6OhoIiMjWbx4\nsdt95syZQ2RkJPHx8Wzfvt3OcnyC6tme1XTKUy/L3XfDiy+ap5QePGg2/8WL3Tf9Q4fMzxpSU+HB\nB+HvfzfvSrZtm1dqd0fr342fU53Htsbvcrm47bbbyMjIoKCggPT0dHbu3HnGPmvXruWbb76hsLCQ\nF154gdmzZ9tVjs/Iy8tTXYKldMpzziwBAdCjB1x6qfvvt20Ls2fDoEFQVQWffALPPguLFrnfv6TE\nfKG46Sa4/354+mlIT4fPPnO//4kTUFhoPn74wXyhOXGi4WscGsvjZ3TKAurz2PbhbnZ2NhEREYSH\nhwOQnJzMqlWriImJqdtn9erVTJs2DYBhw4ZRUVFBaWkpPXr0sKss5SoqKlSXYCmd8rQoS9u2cNVV\nTd+/Uye45RYoLTUf330HW7aYnzVcdln9/XfvNl8owHxh+eknOHIE4uLA3V/K+/dTkZEBF11kvmD1\n6AE9e0JwsF9+TqHTvzNQn8e2xl9SUkJYWFjddmhoKJ9//nmj+xQXF2vd+IUAzJVKJ0xo+v5RUfDN\nN/W/XlMaBLcYAAAFuklEQVTjfv/jx82/Ct5669SLy7595gtFVlb9/f/9b7j9dvMF7PRHdDTMnVt/\n//37Yf16aNfuzEeXLuYFdGerroYff6z/9aAg80VQeJVtjT+gie8qzv7goak/5692796tugRL6ZTH\nL7MENvB/4d692R0bC8uWnfn1hl4oQkLg3nvNhfFOPo4fNxu5O+Xl5qmxlZXm49gx8z9jYswb7Zxt\n2zb3L3TDhpnHOdtnn5l3bjvvPDjvPHb/+CO8+qp5hfaKFfX3z801x2YBAebpvCf7SEICvPRS/f3z\n8k5d5Hdy34AAiI+H55+vv39+PvzP/5zaPvkzAwfC3/5Wf/8dO2DOnPrHHzAAnnmm/r+1L7+EO++s\nf/y4OFiypP7x//UvuOee+sfv3x8ee6z+/mczbLJlyxYjKSmpbnvhwoXGokWLztgnNTXVSE9Pr9uO\niooy9u3bV+9Y/fr1MwB5yEMe8pBHMx7x8fFu+7Nt7/gHDx5MYWEhu3fvplevXqxcuZL09PQz9pk4\ncSJpaWkkJyezdetWgoOD3Y55vnH3J64QQgiP2Nb4AwMDSUtLIykpCZfLxYwZM4iJiWHp0qUApKam\nMn78eNauXUtERATt27fnFS8tvyuEEE7mFxdwCSGEsI5PL9LWlAvA/MVNN91Ejx49GDBggOpSLFFU\nVMSoUaPo378/cXFxPPvss6pL8tjx48cZNmwYCQkJxMbGcv/996suqcVcLheDBg1iQnPOHPJR4eHh\nDBw4kEGDBjF06FDV5bRIRUUFU6ZMISYmhtjYWLZu3aqmEEs+ybVBTU2N0a9fP2PXrl1GVVWVER8f\nbxQUFKguy2OffPKJkZuba8TFxakuxRJ79+41tm/fbhiGYRw5csS4+OKL/fr3c/ToUcMwDKO6utoY\nNmyYsXnzZsUVtcyTTz5p/P73vzcmTJigupQWCw8PNw4ePKi6DEvceOONxssvv2wYhvlvraKiQkkd\nPvuO//QLwIKCguouAPNXI0eOpHPnzqrLsEzPnj1JSEgAoEOHDsTExLBnzx7FVXmuXbt2AFRVVeFy\nuejS0GmMfqC4uJi1a9cyc+ZMbda40iHHjz/+yObNm7npppsA83PQToquYfDZxu/u4q6SkhKFFYmG\n7N69m+3btzNs2DDVpXistraWhIQEevTowahRo4iNjVVdksfuuOMOHn/8cVppckvKgIAAxo4dy+DB\ng3nxxRdVl+OxXbt20a1bN6ZPn84ll1zCrFmzqKysVFKLz/7L0P1CLl389NNPTJkyhWeeeYYOHTqo\nLsdjrVq1Ii8vj+LiYj755BPli2h56v3336d79+4MGjRIi3fJAFlZWWzfvp0PPviAv/3tb2zevFl1\nSR6pqakhNzeXW2+9ldzcXNq3b8+ihtZyspnPNv6QkBCKiorqtouKiggNDVVYkThbdXU1kydP5vrr\nr+fqq69WXY4lOnXqxJVXXsk2hatqtsRnn33G6tWr6dOnD1OnTuWjjz7ixhtvVF1Wi1x00UUAdOvW\njUmTJpGdna24Is+EhoYSGhrKkCFDAJgyZQq5ublKavHZxn/6BWBVVVWsXLmSiRMnqi5L/MwwDGbM\nmEFsbCxz3a3l4kfKysrqFs06duwY69evZ9CgQYqr8szChQspKipi165drFixgtGjR7N8+XLVZXms\nsrKSI0eOAHD06FE+/PBDvz0zrmfPnoSFhfH1118DsGHDBvr376+kFp+99WJDF4D5q6lTp/Lxxx9z\n8OBBwsLCePDBB5k+fbrqsjyWlZXFa6+9VneaHcCjjz7KuHHjFFfWfHv37mXatGnU1tZSW1vLDTfc\nwJgxY1SXZQl/H5mWlpYyadIkwByVXHfddfzmN79RXJXnnnvuOa677jqqqqro16+fsotW5QIuIYRw\nGJ8d9QghhLCHNH4hhHAYafxCCOEw0viFEMJhpPELIYTDSOMXQgiHkcYvhBAOI41fCCEc5v8B607j\n7wIHCvMAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1842a940>"
       ]
      }
     ],
     "prompt_number": 70
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortdistance = distance[:5000]\n",
      "shortdistance.totmiles.hist(grid=False, bins=30, range=(0,7), color='midnightblue')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 71,
       "text": [
        "<matplotlib.axes.AxesSubplot at 0x17e13160>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0xbb68518>"
       ]
      }
     ],
     "prompt_number": 71
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortbikedata.boxplot(column='duration', by='gender', grid=False)\n",
      " # plt.ylim((25,250)) and plt.ylim(ymax = 250, ymin = 25"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 72,
       "text": [
        "<matplotlib.axes.AxesSubplot at 0x1860b898>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x180e6940>"
       ]
      }
     ],
     "prompt_number": 72
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def bikedata_fctn(data):\n",
      "    cnts = data.groupby('gender')['gender'].count()\n",
      "    return {'gender 1': cnts[1], 'gender 2':cnts[2], 'persons of no gender':cnts[0]}\n",
      "\n",
      "print bikedata_fctn(shortbikedata)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{'persons of no gender': 240, 'gender 2': 1188, 'gender 1': 3572}\n"
       ]
      }
     ],
     "prompt_number": 73
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "bikedata.groupby('birthyr')['birthyr'].count()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 74,
       "text": [
        "birthyr\n",
        "1900       241\n",
        "1934         1\n",
        "1935         1\n",
        "1936         2\n",
        "1938         3\n",
        "1939         2\n",
        "1940         2\n",
        "1941        10\n",
        "1942         7\n",
        "1943         1\n",
        "1944        13\n",
        "1945        10\n",
        "1946        10\n",
        "1947        12\n",
        "1948        26\n",
        "...\n",
        "1984       8873\n",
        "1985       9101\n",
        "1986       7927\n",
        "1987       7281\n",
        "1988       7875\n",
        "1989       6678\n",
        "1990       5574\n",
        "1991       3015\n",
        "1992       2127\n",
        "1993       1650\n",
        "1994       1206\n",
        "1995        818\n",
        "1996        329\n",
        "1997        246\n",
        "\\N         6477\n",
        "Length: 142, dtype: int64"
       ]
      }
     ],
     "prompt_number": 74
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# useless because it's counting how many have a birth year\n",
      "bikedata.groupby('birthyr')['gender'].count()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 75,
       "text": [
        "birthyr\n",
        "1900       241\n",
        "1934         1\n",
        "1935         1\n",
        "1936         2\n",
        "1938         3\n",
        "1939         2\n",
        "1940         2\n",
        "1941        10\n",
        "1942         7\n",
        "1943         1\n",
        "1944        13\n",
        "1945        10\n",
        "1946        10\n",
        "1947        12\n",
        "1948        26\n",
        "...\n",
        "1984       8873\n",
        "1985       9101\n",
        "1986       7927\n",
        "1987       7281\n",
        "1988       7875\n",
        "1989       6678\n",
        "1990       5574\n",
        "1991       3015\n",
        "1992       2127\n",
        "1993       1650\n",
        "1994       1206\n",
        "1995        818\n",
        "1996        329\n",
        "1997        246\n",
        "\\N         6477\n",
        "Length: 142, dtype: int64"
       ]
      }
     ],
     "prompt_number": 75
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortbikedata.birthyr.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 76,
       "text": [
        "count     5000\n",
        "unique      64\n",
        "top       1984\n",
        "freq       266\n",
        "Name: birthyr, dtype: int64"
       ]
      }
     ],
     "prompt_number": 76
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print shortbikedata.groupby(['birthyr','gender']).count()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "                duration  start  stop  startid  startname  startlat  \\\n",
        "birthyr gender                                                        \n",
        "1900    0            240    240   240      240        240       240   \n",
        "        1              1      1     1        1          1         1   \n",
        "1934    1              1      1     1        1          1         1   \n",
        "1935    1              1      1     1        1          1         1   \n",
        "1936    1              2      2     2        2          2         2   \n",
        "1938    1              3      3     3        3          3         3   \n",
        "1939    1              2      2     2        2          2         2   \n",
        "1940    1              2      2     2        2          2         2   \n",
        "1941    1             10     10    10       10         10        10   \n",
        "1942    1              7      7     7        7          7         7   \n",
        "1943    2              1      1     1        1          1         1   \n",
        "1944    1             13     13    13       13         13        13   \n",
        "1945    1             10     10    10       10         10        10   \n",
        "1946    1              7      7     7        7          7         7   \n",
        "        2              3      3     3        3          3         3   \n",
        "1947    1              9      9     9        9          9         9   \n",
        "        2              3      3     3        3          3         3   \n",
        "1948    1             21     21    21       21         21        21   \n",
        "        2              5      5     5        5          5         5   \n",
        "1949    1             16     16    16       16         16        16   \n",
        "        2              3      3     3        3          3         3   \n",
        "1950    1             17     17    17       17         17        17   \n",
        "        2              4      4     4        4          4         4   \n",
        "1951    1             19     19    19       19         19        19   \n",
        "        2             10     10    10       10         10        10   \n",
        "1952    1             27     27    27       27         27        27   \n",
        "        2              5      5     5        5          5         5   \n",
        "1953    1             26     26    26       26         26        26   \n",
        "        2             11     11    11       11         11        11   \n",
        "1954    1             22     22    22       22         22        22   \n",
        "        2             13     13    13       13         13        13   \n",
        "1955    1             38     38    38       38         38        38   \n",
        "        2             12     12    12       12         12        12   \n",
        "1956    1             36     36    36       36         36        36   \n",
        "        2              5      5     5        5          5         5   \n",
        "1957    1             46     46    46       46         46        46   \n",
        "        2             15     15    15       15         15        15   \n",
        "1958    1             52     52    52       52         52        52   \n",
        "        2             18     18    18       18         18        18   \n",
        "1959    1             35     35    35       35         35        35   \n",
        "        2             22     22    22       22         22        22   \n",
        "1960    1             45     45    45       45         45        45   \n",
        "        2             12     12    12       12         12        12   \n",
        "1961    1             46     46    46       46         46        46   \n",
        "        2              6      6     6        6          6         6   \n",
        "1962    1             60     60    60       60         60        60   \n",
        "        2             34     34    34       34         34        34   \n",
        "1963    1             57     57    57       57         57        57   \n",
        "        2             43     43    43       43         43        43   \n",
        "1964    1             58     58    58       58         58        58   \n",
        "        2             13     13    13       13         13        13   \n",
        "1965    1             58     58    58       58         58        58   \n",
        "        2             10     10    10       10         10        10   \n",
        "1966    1             55     55    55       55         55        55   \n",
        "        2             15     15    15       15         15        15   \n",
        "1967    1             64     64    64       64         64        64   \n",
        "        2             18     18    18       18         18        18   \n",
        "1968    1             73     73    73       73         73        73   \n",
        "        2             20     20    20       20         20        20   \n",
        "1969    1             75     75    75       75         75        75   \n",
        "                     ...    ...   ...      ...        ...       ...   \n",
        "\n",
        "                startlong  endid  endname  endlat  endlong  bikeid  usertype  \\\n",
        "birthyr gender                                                                 \n",
        "1900    0             240    240      240     240      240     240       240   \n",
        "        1               1      1        1       1        1       1         1   \n",
        "1934    1               1      1        1       1        1       1         1   \n",
        "1935    1               1      1        1       1        1       1         1   \n",
        "1936    1               2      2        2       2        2       2         2   \n",
        "1938    1               3      3        3       3        3       3         3   \n",
        "1939    1               2      2        2       2        2       2         2   \n",
        "1940    1               2      2        2       2        2       2         2   \n",
        "1941    1              10     10       10      10       10      10        10   \n",
        "1942    1               7      7        7       7        7       7         7   \n",
        "1943    2               1      1        1       1        1       1         1   \n",
        "1944    1              13     13       13      13       13      13        13   \n",
        "1945    1              10     10       10      10       10      10        10   \n",
        "1946    1               7      7        7       7        7       7         7   \n",
        "        2               3      3        3       3        3       3         3   \n",
        "1947    1               9      9        9       9        9       9         9   \n",
        "        2               3      3        3       3        3       3         3   \n",
        "1948    1              21     21       21      21       21      21        21   \n",
        "        2               5      5        5       5        5       5         5   \n",
        "1949    1              16     16       16      16       16      16        16   \n",
        "        2               3      3        3       3        3       3         3   \n",
        "1950    1              17     17       17      17       17      17        17   \n",
        "        2               4      4        4       4        4       4         4   \n",
        "1951    1              19     19       19      19       19      19        19   \n",
        "        2              10     10       10      10       10      10        10   \n",
        "1952    1              27     27       27      27       27      27        27   \n",
        "        2               5      5        5       5        5       5         5   \n",
        "1953    1              26     26       26      26       26      26        26   \n",
        "        2              11     11       11      11       11      11        11   \n",
        "1954    1              22     22       22      22       22      22        22   \n",
        "        2              13     13       13      13       13      13        13   \n",
        "1955    1              38     38       38      38       38      38        38   \n",
        "        2              12     12       12      12       12      12        12   \n",
        "1956    1              36     36       36      36       36      36        36   \n",
        "        2               5      5        5       5        5       5         5   \n",
        "1957    1              46     46       46      46       46      46        46   \n",
        "        2              15     15       15      15       15      15        15   \n",
        "1958    1              52     52       52      52       52      52        52   \n",
        "        2              18     18       18      18       18      18        18   \n",
        "1959    1              35     35       35      35       35      35        35   \n",
        "        2              22     22       22      22       22      22        22   \n",
        "1960    1              45     45       45      45       45      45        45   \n",
        "        2              12     12       12      12       12      12        12   \n",
        "1961    1              46     46       46      46       46      46        46   \n",
        "        2               6      6        6       6        6       6         6   \n",
        "1962    1              60     60       60      60       60      60        60   \n",
        "        2              34     34       34      34       34      34        34   \n",
        "1963    1              57     57       57      57       57      57        57   \n",
        "        2              43     43       43      43       43      43        43   \n",
        "1964    1              58     58       58      58       58      58        58   \n",
        "        2              13     13       13      13       13      13        13   \n",
        "1965    1              58     58       58      58       58      58        58   \n",
        "        2              10     10       10      10       10      10        10   \n",
        "1966    1              55     55       55      55       55      55        55   \n",
        "        2              15     15       15      15       15      15        15   \n",
        "1967    1              64     64       64      64       64      64        64   \n",
        "        2              18     18       18      18       18      18        18   \n",
        "1968    1              73     73       73      73       73      73        73   \n",
        "        2              20     20       20      20       20      20        20   \n",
        "1969    1              75     75       75      75       75      75        75   \n",
        "                      ...    ...      ...     ...      ...     ...       ...   \n",
        "\n",
        "                birthyr  gender  \n",
        "birthyr gender                   \n",
        "1900    0           240     240  \n",
        "        1             1       1  \n",
        "1934    1             1       1  \n",
        "1935    1             1       1  \n",
        "1936    1             2       2  \n",
        "1938    1             3       3  \n",
        "1939    1             2       2  \n",
        "1940    1             2       2  \n",
        "1941    1            10      10  \n",
        "1942    1             7       7  \n",
        "1943    2             1       1  \n",
        "1944    1            13      13  \n",
        "1945    1            10      10  \n",
        "1946    1             7       7  \n",
        "        2             3       3  \n",
        "1947    1             9       9  \n",
        "        2             3       3  \n",
        "1948    1            21      21  \n",
        "        2             5       5  \n",
        "1949    1            16      16  \n",
        "        2             3       3  \n",
        "1950    1            17      17  \n",
        "        2             4       4  \n",
        "1951    1            19      19  \n",
        "        2            10      10  \n",
        "1952    1            27      27  \n",
        "        2             5       5  \n",
        "1953    1            26      26  \n",
        "        2            11      11  \n",
        "1954    1            22      22  \n",
        "        2            13      13  \n",
        "1955    1            38      38  \n",
        "        2            12      12  \n",
        "1956    1            36      36  \n",
        "        2             5       5  \n",
        "1957    1            46      46  \n",
        "        2            15      15  \n",
        "1958    1            52      52  \n",
        "        2            18      18  \n",
        "1959    1            35      35  \n",
        "        2            22      22  \n",
        "1960    1            45      45  \n",
        "        2            12      12  \n",
        "1961    1            46      46  \n",
        "        2             6       6  \n",
        "1962    1            60      60  \n",
        "        2            34      34  \n",
        "1963    1            57      57  \n",
        "        2            43      43  \n",
        "1964    1            58      58  \n",
        "        2            13      13  \n",
        "1965    1            58      58  \n",
        "        2            10      10  \n",
        "1966    1            55      55  \n",
        "        2            15      15  \n",
        "1967    1            64      64  \n",
        "        2            18      18  \n",
        "1968    1            73      73  \n",
        "        2            20      20  \n",
        "1969    1            75      75  \n",
        "                    ...     ...  \n",
        "\n",
        "[117 rows x 15 columns]\n"
       ]
      }
     ],
     "prompt_number": 77
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(shortbikedata.birthyr)\n",
      "for x in range (0, 10):\n",
      "    print type(shortbikedata.birthyr[x]),"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<type 'int'> <type 'int'> <type 'int'> <type 'int'> <type 'int'> <type 'int'> <type 'int'> <type 'int'> <type 'int'> <type 'int'>\n"
       ]
      }
     ],
     "prompt_number": 78
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print (shortbikedata.columns)\n",
      "print\n",
      "print shortdistance.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Index([u'duration', u'start', u'stop', u'startid', u'startname', u'startlat', u'startlong', u'endid', u'endname', u'endlat', u'endlong', u'bikeid', u'usertype', u'birthyr', u'gender'], dtype='object')\n",
        "\n",
        "Index([u'latdist', u'longdist', u'totaldist', u'longmiles', u'latmiles', u'totmiles'], dtype='object')\n"
       ]
      }
     ],
     "prompt_number": 79
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortdistdur = pd.DataFrame({ 'duration' : shortbikedata.duration,\n",
      "                             'totmiles' : shortdistance.totmiles, \n",
      "                             'birthyr' : shortbikedata.birthyr, \n",
      "                             'gender' : shortbikedata.gender })"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 80
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdd = shortdistdur\n",
      "sdd.head()\n",
      "sdd.tail()\n",
      "sdd.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>duration</th>\n",
        "      <th>gender</th>\n",
        "      <th>totmiles</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td>   5000.000000</td>\n",
        "      <td> 5000.000000</td>\n",
        "      <td> 5000.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>    830.814600</td>\n",
        "      <td>    1.189600</td>\n",
        "      <td>    0.968057</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>   4617.641036</td>\n",
        "      <td>    0.499702</td>\n",
        "      <td>    0.713186</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>     62.000000</td>\n",
        "      <td>    0.000000</td>\n",
        "      <td>    0.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>    338.000000</td>\n",
        "      <td>    1.000000</td>\n",
        "      <td>    0.482865</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>    532.000000</td>\n",
        "      <td>    1.000000</td>\n",
        "      <td>    0.751357</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>    862.250000</td>\n",
        "      <td>    1.000000</td>\n",
        "      <td>    1.249772</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td> 278555.000000</td>\n",
        "      <td>    2.000000</td>\n",
        "      <td>    5.107312</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>8 rows \u00d7 3 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 81,
       "text": [
        "            duration       gender     totmiles\n",
        "count    5000.000000  5000.000000  5000.000000\n",
        "mean      830.814600     1.189600     0.968057\n",
        "std      4617.641036     0.499702     0.713186\n",
        "min        62.000000     0.000000     0.000000\n",
        "25%       338.000000     1.000000     0.482865\n",
        "50%       532.000000     1.000000     0.751357\n",
        "75%       862.250000     1.000000     1.249772\n",
        "max    278555.000000     2.000000     5.107312\n",
        "\n",
        "[8 rows x 3 columns]"
       ]
      }
     ],
     "prompt_number": 81
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdd.loc[:3,['duration','totmiles']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>duration</th>\n",
        "      <th>totmiles</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 382</td>\n",
        "      <td> 0.609332</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 372</td>\n",
        "      <td> 0.573908</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 591</td>\n",
        "      <td> 0.992771</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 583</td>\n",
        "      <td> 0.729265</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>4 rows \u00d7 2 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 82,
       "text": [
        "   duration  totmiles\n",
        "0       382  0.609332\n",
        "1       372  0.573908\n",
        "2       591  0.992771\n",
        "3       583  0.729265\n",
        "\n",
        "[4 rows x 2 columns]"
       ]
      }
     ],
     "prompt_number": 82
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdd[(sdd.birthyr < 0)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <td>Int64Index([], dtype='int64')</td>\n",
        "      <td>Empty DataFrame</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>0 rows \u00d7 4 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 83,
       "text": [
        "Empty DataFrame\n",
        "Columns: [birthyr, duration, gender, totmiles]\n",
        "Index: []\n",
        "\n",
        "[0 rows x 4 columns]"
       ]
      }
     ],
     "prompt_number": 83
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "shortbikedata.columns\n",
      "distance.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 84,
       "text": [
        "Index([u'latdist', u'longdist', u'totaldist', u'longmiles', u'latmiles', u'totmiles'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 84
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "loctime = pd.DataFrame({ 'start' : shortbikedata.start,\n",
      "                        'stop' : shortbikedata.stop, \n",
      "                        'startname' : shortbikedata.startname, \n",
      "                        'endname' : shortbikedata.endname,\n",
      "                        'totmiles' : shortdistance.totmiles })"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 85
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print len(loctime.groupby('startname')), len(loctime.groupby('endname'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "317 315\n"
       ]
      }
     ],
     "prompt_number": 86
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# print loctime.groupby('startname').startname.count(), loctime.groupby('endname').totmiles.count()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 87
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print loctime.groupby('startname').startname.count()[0:3], \\\n",
      " ',', loctime.groupby('startname').startname.count()[0], \\\n",
      " ',',loctime.groupby('startname').startname.count()[1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "startname\n",
        "1 Ave & E 15 St    39\n",
        "1 Ave & E 18 St    34\n",
        "1 Ave & E 30 St    13\n",
        "dtype: int64 , 39 , "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "34\n"
       ]
      }
     ],
     "prompt_number": 88
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "    # list.index(x) = Returns the index in the list of the first item whose value is x. \n",
      "    # Error if there is no such item.\n",
      "\n",
      "loclistscount = loctime.groupby('startname').startname.count()\n",
      "\n",
      "loclistecount = loctime.groupby('endname').endname.count()\n",
      "\n",
      "\n",
      "fullloclist = temploclist = []\n",
      "\n",
      "print len(loclistscount), fullloclist, temploclist"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "317 [] []\n"
       ]
      }
     ],
     "prompt_number": 89
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Testing alternate approach - not necessary here\n",
      "newendnamelist = []\n",
      "for x in bikedata['endname']:\n",
      "    if x not in newendnamelist:\n",
      "        newendnamelist.append(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 90
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fullloclist = []\n",
      "for x in range(0, (len(loclistscount))):\n",
      "    fullloclist.append(loclistscount.index[x])\n",
      "type(fullloclist)\n",
      "print loclistecount.index[0], len(fullloclist)\n",
      "\n",
      "for x in (loclistecount.index):\n",
      "    if x in fullloclist:\n",
      "        pass\n",
      "    else:\n",
      "        fullloclist.append(x)\n",
      "\n",
      "fullloclist.sort()\n",
      "        \n",
      "print len(loclistscount), len(loclistecount), len(fullloclist)\n",
      "print fullloclist[-5:]\n",
      "\n",
      " # LOOK UP THE LECTURE WHERE WE COVERED HOW TO LOOK UP ITEMS IN A DATAFRAME BASED ON LOOKUP VALUES\n",
      "    # WE NEED TO FIGURE OUT HOW TO REFERENCE COUNTS (GROUPBY.COUNT) BY PASSING VALUES IN THE FULLLOCLIST\n",
      "    # THEN WE CAN CREATE A SCATTERPLOT BASED ON THE NUMBERS OF DEPARTURES & ARRIVALS FROM EACH LOCATION\n",
      "    # SOME OF THEM WILL BE 0; MAKE SURE THE CODE CAN HANDLE THAT"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1 Ave & E 15 St 317\n",
        "317 315 323\n",
        "['Willoughby Ave & Hall St', 'Willoughby Ave & Walworth St', 'Willoughby St & Fleet St', 'Wythe Ave & Metropolitan Ave', 'York St & Jay St']\n"
       ]
      }
     ],
     "prompt_number": 92
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print fullloclist[0:5]\n",
      "type(fullloclist[0]) # type(loclistscount.index)\n",
      "print loclistscount[fullloclist[0]]\n",
      "\n",
      "import matplotlib.pyplot as plt\n",
      "fig, ax = plt.subplots()\n",
      "plt.scatter(loclistscount[fullloclist], loclistecount[fullloclist])\n",
      "ax.set_title('Citi Bike Stations: Borrowing vs. Returning bicycles', color=\"midnightblue\") \n",
      "plt.xlabel('# of bikes checked out from this station', color=\"midnightblue\")\n",
      "plt.ylabel('# of bikes returned to this station', color=\"midnightblue\")\n",
      "plt.text(-7.5,75, \"Outliers = Citi Bike Personnel Time\", color='maroon'), plt.text(2.7,67.5, \"= Taxpayers' Money.\", color='maroon')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['1 Ave & E 15 St', '1 Ave & E 18 St', '1 Ave & E 30 St', '1 Ave & E 44 St', '10 Ave & W 28 St']\n",
        "39\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 93,
       "text": [
        "(<matplotlib.text.Text at 0xbf67e48>, <matplotlib.text.Text at 0xbf6d710>)"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nR9QAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x18260470>"
       ]
      }
     ],
     "prompt_number": 93
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.get_figlabels()\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 94,
       "text": [
        "[]"
       ]
      }
     ],
     "prompt_number": 94
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print loctime.groupby('startname').startname.count(), loctime.groupby('endname').totmiles.count()\n",
      "testlocation = fullloclist[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "startname\n",
        "1 Ave & E 15 St            39\n",
        "1 Ave & E 18 St            34\n",
        "1 Ave & E 30 St            13\n",
        "1 Ave & E 44 St             4\n",
        "10 Ave & W 28 St           17\n",
        "11 Ave & W 27 St           10\n",
        "11 Ave & W 41 St           26\n",
        "12 Ave & W 40 St            5\n",
        "2 Ave & E 31 St            31\n",
        "2 Ave & E 58 St            23\n",
        "3 Ave & Schermerhorn St     4\n",
        "5 Ave & E 29 St            19\n",
        "6 Ave & Broome St           5\n",
        "6 Ave & Canal St            8\n",
        "6 Ave & W 33 St            20\n",
        "...\n",
        "Washington Ave & Park Ave         2\n",
        "Washington Park                   8\n",
        "Washington Pl & 6 Ave            24\n",
        "Washington Pl & Broadway         17\n",
        "Washington Square E              10\n",
        "Washington St & Gansevoort St    26\n",
        "Water - Whitehall Plaza           3\n",
        "Watts St & Greenwich St           9\n",
        "West St & Chambers St            31\n",
        "West Thames St                   22\n",
        "William St & Pine St              6\n",
        "Willoughby Ave & Hall St          4\n",
        "Willoughby Ave & Walworth St      8\n",
        "Wythe Ave & Metropolitan Ave     11\n",
        "York St & Jay St                  6\n",
        "Length: 317, dtype: int64 endname\n",
        "1 Ave & E 15 St            27\n",
        "1 Ave & E 18 St            23\n",
        "1 Ave & E 30 St            26\n",
        "1 Ave & E 44 St             7\n",
        "10 Ave & W 28 St            9\n",
        "11 Ave & W 27 St           17\n",
        "11 Ave & W 41 St           17\n",
        "12 Ave & W 40 St           12\n",
        "2 Ave & E 31 St            29\n",
        "2 Ave & E 58 St            10\n",
        "3 Ave & Schermerhorn St     4\n",
        "5 Ave & E 29 St            19\n",
        "6 Ave & Broome St          12\n",
        "6 Ave & Canal St           11\n",
        "6 Ave & W 33 St            21\n",
        "...\n",
        "Washington Park                   3\n",
        "Washington Pl & 6 Ave            17\n",
        "Washington Pl & Broadway         25\n",
        "Washington Square E              25\n",
        "Washington St & Gansevoort St    22\n",
        "Water - Whitehall Plaza           7\n",
        "Watts St & Greenwich St          13\n",
        "West St & Chambers St            32\n",
        "West Thames St                    9\n",
        "William St & Pine St              6\n",
        "Willoughby Ave & Hall St          2\n",
        "Willoughby Ave & Walworth St      4\n",
        "Willoughby St & Fleet St          9\n",
        "Wythe Ave & Metropolitan Ave     14\n",
        "York St & Jay St                 12\n",
        "Length: 315, dtype: int64\n"
       ]
      }
     ],
     "prompt_number": 98
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "snamelist = (loctime.groupby('startname'))\n",
      "enamelist = (loctime.groupby('endname'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 105
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "enamelist.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>totmiles</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>endname</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">1 Ave &amp; E 15 St</th>\n",
        "      <th>count</th>\n",
        "      <td> 27.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  0.875278</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0.642781</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.284301</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  0.527321</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  0.702875</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  0.938907</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  3.056481</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">1 Ave &amp; E 18 St</th>\n",
        "      <th>count</th>\n",
        "      <td> 23.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  0.781966</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0.515766</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  0.552287</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  0.627704</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  0.983256</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  2.077602</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">1 Ave &amp; E 30 St</th>\n",
        "      <th>count</th>\n",
        "      <td> 26.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  0.874752</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0.633524</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.129778</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  0.391566</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  0.822954</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  1.104233</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  3.014672</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">1 Ave &amp; E 44 St</th>\n",
        "      <th>count</th>\n",
        "      <td>  7.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  1.397390</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0.593647</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.549950</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  1.034134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  1.438735</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  1.826320</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  2.072134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">10 Ave &amp; W 28 St</th>\n",
        "      <th>count</th>\n",
        "      <td>  9.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  0.763514</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0.444615</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.330214</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  0.364988</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  0.684018</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  1.255814</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  1.377439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">11 Ave &amp; W 27 St</th>\n",
        "      <th>count</th>\n",
        "      <td> 17.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  1.381261</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0.825688</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.188197</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  0.884789</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  1.358315</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  1.988110</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  3.490604</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">11 Ave &amp; W 41 St</th>\n",
        "      <th>count</th>\n",
        "      <td> 17.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  0.919587</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  0.524688</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.243459</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  0.541566</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  0.713416</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  1.288918</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td>  2.019598</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"4\" valign=\"top\">12 Ave &amp; W 40 St</th>\n",
        "      <th>count</th>\n",
        "      <td> 12.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  1.990078</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>  1.137504</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  0.641002</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td></td>\n",
        "      <td></td>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>2520 rows \u00d7 1 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 106,
       "text": [
        "                         totmiles\n",
        "endname                          \n",
        "1 Ave & E 15 St  count  27.000000\n",
        "                 mean    0.875278\n",
        "                 std     0.642781\n",
        "                 min     0.284301\n",
        "                 25%     0.527321\n",
        "                 50%     0.702875\n",
        "                 75%     0.938907\n",
        "                 max     3.056481\n",
        "1 Ave & E 18 St  count  23.000000\n",
        "                 mean    0.781966\n",
        "                 std     0.515766\n",
        "                 min     0.000000\n",
        "                 25%     0.552287\n",
        "                 50%     0.627704\n",
        "                 75%     0.983256\n",
        "                 max     2.077602\n",
        "1 Ave & E 30 St  count  26.000000\n",
        "                 mean    0.874752\n",
        "                 std     0.633524\n",
        "                 min     0.129778\n",
        "                 25%     0.391566\n",
        "                 50%     0.822954\n",
        "                 75%     1.104233\n",
        "                 max     3.014672\n",
        "1 Ave & E 44 St  count   7.000000\n",
        "                 mean    1.397390\n",
        "                 std     0.593647\n",
        "                 min     0.549950\n",
        "                 25%     1.034134\n",
        "                 50%     1.438735\n",
        "                 75%     1.826320\n",
        "                 max     2.072134\n",
        "10 Ave & W 28 St count   9.000000\n",
        "                 mean    0.763514\n",
        "                 std     0.444615\n",
        "                 min     0.330214\n",
        "                 25%     0.364988\n",
        "                 50%     0.684018\n",
        "                 75%     1.255814\n",
        "                 max     1.377439\n",
        "11 Ave & W 27 St count  17.000000\n",
        "                 mean    1.381261\n",
        "                 std     0.825688\n",
        "                 min     0.188197\n",
        "                 25%     0.884789\n",
        "                 50%     1.358315\n",
        "                 75%     1.988110\n",
        "                 max     3.490604\n",
        "11 Ave & W 41 St count  17.000000\n",
        "                 mean    0.919587\n",
        "                 std     0.524688\n",
        "                 min     0.243459\n",
        "                 25%     0.541566\n",
        "                 50%     0.713416\n",
        "                 75%     1.288918\n",
        "                 max     2.019598\n",
        "12 Ave & W 40 St count  12.000000\n",
        "                 mean    1.990078\n",
        "                 std     1.137504\n",
        "                 min     0.641002\n",
        "                              ...\n",
        "\n",
        "[2520 rows x 1 columns]"
       ]
      }
     ],
     "prompt_number": 106
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "    #  YOU ARE IN THE MIDDLE OF THIS YOU ARE IN THE MIDDLE OF THIS *** MIDDLE **** MIDDLE ***\n",
      "print enamelist"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<pandas.core.groupby.DataFrameGroupBy object at 0x0000000024F9CAC8>\n"
       ]
      }
     ],
     "prompt_number": 107
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#allname = snamelist\n",
      "#for x in range (0, len(enamelist)):\n",
      "#    if (enamelist.index[x] in allname.index):\n",
      "#        pass\n",
      "#    else:\n",
      "#        allname.index.append\n",
      "#print len(allname)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 109
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(femaleshortbikedata.duration[1])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 110,
       "text": [
        "numpy.int64"
       ]
      }
     ],
     "prompt_number": 110
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# femaleshortbikedata.columns  --> THE FOLLOWING DIDN'T WORK AT ALL\n",
      "# count = badcount = 0\n",
      "# for x in range(len(femaleshortbikedata)):\n",
      "#     if (type(femaleshortbikedata.duration[x]) == 'numpy.int64'):\n",
      "#         count = count + 1\n",
      "#     else:\n",
      "#         badcount = badcount + 1\n",
      "    \n",
      "# print 'femaleshortbikedata has int duration', count, 'times'\n",
      "# print 'femaleshortbikedata has non-int duration', badcount, 'times'\n",
      "                \n",
      "# femaleshortbikedata.duration.count(), len(femaleshortbikedata)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 111
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print femaleshortbikedata.duration.describe(), '\\n', '\\n', \\\n",
      "maleshortbikedata.duration.describe(), '\\n', '\\n', \\\n",
      "type(femaleshortbikedata.duration), '\\n', \\\n",
      "type(maleshortbikedata.duration)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "count      1188.000000\n",
        "mean        887.459596\n",
        "std        3575.994400\n",
        "min          66.000000\n",
        "25%         383.750000\n",
        "50%         565.000000\n",
        "75%         898.500000\n",
        "max      115051.000000\n",
        "Name: duration, dtype: float64 \n",
        "\n",
        "count      3572.000000\n",
        "mean        749.801792\n",
        "std        5017.069367\n",
        "min          62.000000\n",
        "25%         315.750000\n",
        "50%         492.000000\n",
        "75%         802.000000\n",
        "max      278555.000000\n",
        "Name: duration, dtype: float64 \n",
        "\n",
        "<class 'pandas.core.series.Series'> \n",
        "<class 'pandas.core.series.Series'>\n"
       ]
      }
     ],
     "prompt_number": 112
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fig, ax = plt.subplots(2,2)\n",
      "ax[0,0].hist(malebikedata.duration, color='midnightblue', bins = 10, range=(1,2500))\n",
      "ax[1,0].hist(femdurlist, color='red', bins=10, range=(1,2500))\n",
      "ax[0,1].hist(malebikedata.birthyr, bins=(malebikedata.birthyr.max()-maleshortbikedata.birthyr.min()+1)/5)\n",
      "ax[1,1].hist(fembirthlist, color='red', bins=(femalebikedata.birthyr.max()-femalebikedata.birthyr.min()+1)/5)             "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 119,
       "text": [
        "(array([   4.,   15.,   39.,   50.,   74.,   81.,   68.,   86.,   95.,\n",
        "        163.,  258.,  184.,   62.,    9.]),\n",
        " array([ 1943.        ,  1946.85714286,  1950.71428571,  1954.57142857,\n",
        "        1958.42857143,  1962.28571429,  1966.14285714,  1970.        ,\n",
        "        1973.85714286,  1977.71428571,  1981.57142857,  1985.42857143,\n",
        "        1989.28571429,  1993.14285714,  1997.        ]),\n",
        " <a list of 14 Patch objects>)"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x1852edd8>"
       ]
      }
     ],
     "prompt_number": 119
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "maleshortbikedata.columns\n",
      "\n",
      "femlongminlist=[]\n",
      "for x in femlongdurlist:\n",
      "    femlongminlist.append(x/60)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 190
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fig, ax = plt.subplots(2,2)\n",
      "# plt.xlabel('Males in Blue & Females in Red', color=\"black\", fontdict={'fontsize':10})\n",
      "\n",
      "maledurplot = ax[0,0].hist(malebikedata.minutes, color='midnightblue', bins = 10, range=(0,2500/60))\n",
      "femdurplot = ax[1,0].hist(femlongminlist, color='red', bins=10, range=(0,2500/60))\n",
      "'\\n'*5\n",
      "maleageplot = ax[0,1].hist(2013-malebikedata.birthyr, color='midnightblue', bins=(malebikedata.birthyr.max()-malebikedata.birthyr.min()+1)/5, range=(0,90))\n",
      "femageplot = ax[1,1].hist(femlongage, color='red', bins=(malebikedata.birthyr.max()-malebikedata.birthyr.min()+1)/5, range=(0,90)) \n",
      "\n",
      "ax[0,0].set_title('Ride time (mins)', fontdict={'fontsize':14}, )\n",
      "# ax[1,0].set_title('How long are women on bikes?')\n",
      "ax[0,1].set_title('Age (yrs)', fontdict={'fontsize':14}, )\n",
      "# ax[1,1].set_title('Age of Women on Bikes')\n",
      "\n",
      "# fig, ax = plt.subplots()\n",
      "# plt.scatter(loclistscount[fullloclist], loclistecount[fullloclist])\n",
      "# ax.set_title('Citi Bike Stations: Borrowing vs. Returning bicycles', color=\"midnightblue\") \n",
      "\n",
      "\n",
      "# plt.xlabel('Bike Trip Distance (Miles)', color=\"darkgreen\", fontdict={'fontsize':16})\n",
      "# plt.ylabel('Number of Trips', color=\"darkgreen\", fontdict={'fontsize':16})\n",
      " # plt.text(25,50000, \"Few trips last even half an hour\", color='midnightblue')\n",
      "\n",
      "plt.figtext(0.27,.015,\"Males in Blue & Females in Red\",fontdict={'fontsize':14}, color=\"black\")\n",
      "# plt.figtext(0.655,.17,\"(Ans: Not very far!)\",fontdict={'fontsize':10}, color=\"darkgreen\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 207,
       "text": [
        "<matplotlib.text.Text at 0x3a0d8be0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x38ec7160>"
       ]
      }
     ],
     "prompt_number": 207
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ax[0,] = maleshortbikedata.duration.hist(grid=False, bins=20, range=(1,4000))\n",
      "ax[1,0] = femaleshortbikedata.duration.hist(grid=False, bins=20, range=(1,4000))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "femaleshortbikedata.duration.hist(grid=False, bins=20, range=(1,4000))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "femaleshortbikedata.startid.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
